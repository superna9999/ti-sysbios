/*
 *  Copyright 2012 by Texas Instruments Incorporated.
 *
 */

/*
 *  ======== stairstep.cfg ========
 */

System = xdc.useModule('xdc.runtime.System');
SysMin = xdc.useModule('xdc.runtime.SysMin');
Log = xdc.useModule('xdc.runtime.Log');
LoggerBuf = xdc.useModule('xdc.runtime.LoggerBuf');
Timestamp = xdc.useModule('xdc.runtime.Timestamp');
Diags = xdc.useModule('xdc.runtime.Diags');
Defaults = xdc.useModule('xdc.runtime.Defaults');
Main = xdc.useModule('xdc.runtime.Main');

BIOS = xdc.useModule('ti.sysbios.BIOS');
Clock = xdc.useModule('ti.sysbios.knl.Clock');
Swi = xdc.useModule('ti.sysbios.knl.Swi');
Task = xdc.useModule('ti.sysbios.knl.Task');
Load = xdc.useModule('ti.sysbios.utils.Load');
Timer = xdc.useModule('ti.sysbios.hal.Timer');
Semaphore = xdc.useModule('ti.sysbios.knl.Semaphore');
Hwi = xdc.useModule('ti.sysbios.hal.Hwi');

/* 
 * The BIOS module will create the default heap for the system.
 * Specify the size of this default heap.
 */
BIOS.heapSize = 0x2000;
BIOS.libType = BIOS.LibType_Custom;

/* Configure SysMin to send System_printfs to standard out */
System.SupportProxy = SysMin;

Clock.tickPeriod = 10000;

/*
 * Configure a Timer to interrupt every 100ms
 * timerFunc() provides Hwi load and posts a Swi and Semaphore 
 * to provide Swi and Task loads.
 * And adjusts the loads every 5 seconds.
 */
var timerParams = new Timer.Params();
timerParams.startMode = Timer.StartMode_AUTO;
timerParams.period = 100000;        /* 100,000 uSecs = 100ms */
var timer0 = Timer.create(Timer.ANY, '&timerFunc', timerParams); 

/* 
 * Create Semaphore for Task thread to pend on 
 */
Program.global.sem = Semaphore.create(0);

/* 
 * Create Swi load thread 
 */
Program.global.swi = Swi.create('&swiLoad');

/* 
 * Create Task load thread 
 */
var taskLoadTask = Task.create('&taskLoad');

/* 
 * Enable RTA 
 */

/* 
 * Bring in and configure the RTA Agent 
 */
var Agent = xdc.useModule('ti.sysbios.rta.Agent');

/*
 * Enable logging of SYS/BIOS Hwi and Swi events, and provide the ability
 * to turn them on or off at runtime (runtime control).
 */
Agent.sysbiosSwiLogging = true;
Agent.sysbiosSwiLoggingRuntimeControl = true;
Agent.sysbiosHwiLogging = true;
Agent.sysbiosHwiLoggingRuntimeControl = true;

/* 
 * Set the size of the logger buffer used for Log calls in the application's 
 * C code in bytes.
 */
Agent.mainLoggerSize = 1024;

/* Set the size of the logger buffer used for logging Load events in bytes. */
Agent.loadLoggerSize = 512;

/*
 * This example generates a lot of RTA traffic so give plenty of buffer
 * room to the Agent
 *
 * Create a smaller buffer for 28x targets. The RTA Agent also requires larger
 * Task stack sizes than the default size for the 28x.
 */
var isa = Program.build.target.isa;
var targName = Program.build.target.$name;
if ((isa == "28") || (isa == "28FP")) {
    Task.defaultStackSize = 512;
}
else if (targName.indexOf("MSP430") != -1) {
    /*
     * Set the size of the logger buffer used for Log calls from SYS/BIOS modules
     * in bytes.
     */
    Agent.sysbiosLoggerSize = 2048;

    Program.stack = 0x80;
    Program.argSize = 0x8;
}
/*
 *  @(#) ti.sysbios.genx; 2, 0, 0, 0,527; 5-18-2012 06:05:28; /db/vtree/library/trees/avala/avala-q37x/src/ xlibrary

 */

