%%{
/* 
 *  Copyright (c) 2010 Texas Instruments and others.
 *  All rights reserved. This program and the accompanying materials
 *  are made available under the terms of the Eclipse Public License v1.0
 *  which accompanies this distribution, and is available at
 *  http://www.eclipse.org/legal/epl-v10.html
 *
 *  Contributors:
 *      Texas Instruments - initial implementation
 *
 * */
%%}
%%{
    var File = xdc.module("xdc.services.io.File");

    var BIOS = xdc.module("ti.sysbios.BIOS");

    var TARGET = $args[0];

    var XDCROOT = String(environment['xdc.rootDir'] + '/packages/').replace(/\\/g, "/");

    var XOPTS = '-I "' + XDCROOT + '"'
	+ " -Dxdc_target_types__=" + TARGET.stdInclude
	+ " -Dxdc_target_name__=" + TARGET.name;

    var CGEN = TARGET.rootDir.replace(/\\/g, "/");

    function baseName(path) {
	return path.substr(path.lastIndexOf('/') + 1).replace(/\.[^\.]+$/, "");
    }

    function packageName(path) {
	var dirpath = path.substring(0, path.lastIndexOf('/'));
	return dirpath.substr(dirpath.lastIndexOf('/') + 1);
    }
    var OBJS = [];
%%}
vpath % `File.getDOSPath(this.$package.packageRepository) + "ti/sysbios/"`
vpath %.c `XDCROOT`

CCOPTS    = `BIOS.getCCOpts(TARGET.name)`

XDC_ROOT  = `XDCROOT`

BIOS_ROOT = `File.getDOSPath(this.$package.packageRepository) + "ti/sysbios/"`

BIOS_DEFS = `BIOS.getDefs()`

BIOS_INC  = -I"`File.getDOSPath(this.$package.packageRepository)`"

%if (TARGET.$name.match(/gnu/)) {
CC = `CGEN`/`TARGET.ccBin.cmd` $(CCOPTS) -I `CGEN`/arm-none-eabi/include
ASM = `CGEN`/`TARGET.asmBin.cmd` $(CCOPTS) -I `CGEN`/arm-none-eabi/include
AR = `CGEN`/`TARGET.arBin.cmd` `TARGET.ar.opts`
%}
%else {
CC = `CGEN`/bin/`TARGET.cc.cmd` $(CCOPTS) -I `CGEN`/include
ASM = `CGEN`/bin/`TARGET.asm.cmd` $(CCOPTS) -I `CGEN`/include
AR = `CGEN`/bin/`TARGET.ar.cmd` `TARGET.ar.opts`
%}

%if (environment["os.name"].match(/Windows.*/i)) {
DEL = cmd.exe /q /c del /f
%}
%else {
DEL = rm -f
%}

define RM
	$(if $(wildcard $1),$(DEL) $1,:)
endef

define ASSEMBLE
	@echo asm`TARGET.suffix` $< ...
	@$(ASM) $(BIOS_DEFS) `XOPTS` $(BIOS_INC) $<
endef
%var LIB = "sysbios.lib";

all: `LIB`

%var sources = BIOS.getAsmFiles(TARGET.$name);
%for each (var s in sources) {
%if (TARGET.$name.match(/gnu/)) {
%    var obj = packageName(s) + "_" + baseName(s) + ".o";
%}
%else {
%    var obj = packageName(s) + "_" + baseName(s) + ".obj";
%}
%    OBJS.push(obj)
`obj`: `s` makefile
	@-$(call RM, $@)
%if (TARGET.$name.match(/gnu/)) {
	$(ASSEMBLE) -o `obj`
%}
%else {
	$(ASSEMBLE) --output_file=`obj`
%}

%}

%if (TARGET.$name.match(/gnu/)) {
BIOS.o: `BIOS.getCFiles(TARGET.name)` makefile
	@-$(call RM, BIOS.o)
	@-$(call RM, BIOS.o.dep)
%}
%else {
BIOS.obj: `BIOS.getCFiles(TARGET.name)` makefile
	@-$(call RM, $@)
%}
	@echo cl`TARGET.suffix` $< ...
	@$(CC) $(BIOS_DEFS) `XOPTS` $(BIOS_INC) \
%var sources = BIOS.getCFiles(TARGET.name).split(' ');
%for each (var s in sources) {
%    if (s.substring(0,4) == "xdc/") {
	$(XDC_ROOT)`s` \
%    } else if (s.substring(0,2) == "./") {
	`s` \
%    } else {
	$(BIOS_ROOT)`s` \
%    }
%}

%if (TARGET.$name.match(/gnu/)) {
`LIB`: BIOS.o `OBJS.join(" ")`
%}
%else {
`LIB`: BIOS.obj `OBJS.join(" ")`
%}
	@echo ar`TARGET.suffix` $^ ...
	@-$(call RM, $@)
	@$(AR) $@ $^

clean:
	@-$(call RM, `LIB`)
%if (TARGET.$name.match(/gnu/)) {
	@-$(call RM, BIOS.o)
%}
%else {
	@-$(call RM, BIOS.obj)
%}
%for (var i = 0; i < OBJS.length; i++) {
	@-$(call RM, `OBJS[i]`)
%}

%%{
/*
 * @(#) ti.sysbios; 2, 0, 0, 0,573; 5-18-2012 06:03:34; /db/vtree/library/trees/avala/avala-q37x/src/ xlibrary

 */

%%}
