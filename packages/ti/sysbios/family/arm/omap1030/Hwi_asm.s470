;
; ======== Hwi_asm.s470 ========
;
;! Revision History
;! ================
;! 17-Dec-2010 agd	SDOCM00077480 Force 8 byte stack alignment
;! 14-Dec-2009 agd	tag Module state struct
;! 31-Oct-2007 agd	Reworked dispatcher envelope
;! 13-Nov-2006 agd	Moved vector table in Hwi.xdt
;! 03-Oct-2006 agd	FIQ dispatcher and stack support
;! 12-Sep-2006 cmcc     Added .sect and .clink to all functions
;! 01-Aug-2006 agd      created
;

        .cdecls C,NOLIST,"package/internal/Hwi.xdc.h" 

        .state32

    .if __TI_EABI_ASSEMBLER
        .asg ti_sysbios_family_arm_omap1030_Hwi_dispatchIRQC__I, _ti_sysbios_family_arm_omap1030_Hwi_dispatchIRQC__I
        .asg ti_sysbios_family_arm_omap1030_Hwi_dispatchIRQ, _ti_sysbios_family_arm_omap1030_Hwi_dispatchIRQ
        .asg ti_sysbios_family_arm_omap1030_Hwi_init, _ti_sysbios_family_arm_omap1030_Hwi_init
        .asg ti_sysbios_family_arm_omap1030_Hwi_Module__state__V, _ti_sysbios_family_arm_omap1030_Hwi_Module__state__V
        .asg ti_sysbios_family_arm_omap1030_Hwi_l1Intc, _ti_sysbios_family_arm_omap1030_Hwi_l1Intc
        .asg ti_sysbios_family_arm_omap1030_Hwi_l2Intc, _ti_sysbios_family_arm_omap1030_Hwi_l2Intc
    .endif

        .global _ti_sysbios_family_arm_omap1030_Hwi_dispatchIRQC__I
        .global _ti_sysbios_family_arm_omap1030_Hwi_dispatchIRQ
        .global _ti_sysbios_family_arm_omap1030_Hwi_init

_ti_sysbios_family_arm_omap1030_Hwi_Module__state__V .tag ti_sysbios_family_arm_omap1030_Hwi_Module_State

;
; Set the addresses of the L1 and L2 interrupt controller structs
;
        .global _ti_sysbios_family_arm_omap1030_Hwi_l1Intc
        .global _ti_sysbios_family_arm_omap1030_Hwi_l2Intc

;_Hwi_l1Intc        .set    0xFFFEC800      ; omap1030
_ti_sysbios_family_arm_omap1030_Hwi_l1Intc .set    0xFFFECB00      ; omap5912
_ti_sysbios_family_arm_omap1030_Hwi_l2Intc .set    0xFFFE0000

;
;  ======== Hwi_dispatchIRQ ========
;
;  Here on IRQ interrupt
;
;  The ARM processor doesn't support nested interrupts easily.
;  Simply re-enabling interrupts while in IRQ mode will cause the
;  LR to get trashed when the next interrupt occurs.
;  The standard solution is to push the LR and SPSR onto the IRQ stack,
;  then switch to another mode before re-enabling interrupts.
;  However, that approach doesn't map well to how BIOS currently
;  manages ISR and task stacks. The design below resolves this
;  conflict. 
;
;  The design requires BIOS apps to be running in system mode. 
;
;  The Hwi_init() function below which is called during system 
;  initialisation switches the execution mode from user mode to 
;  system mode.
;  
;  - save RA and spsr_sys into global variables
;  - switch back to system mode
;  - make room for RA on stack
;  - save C required context (Child registers)
;  - copy RA into system stack
;  - push lr_sys and spsr_sys onto system stack
;  - call C dispatcher
;  - pop lr_sys and spsr_sys
;  - switch to IRQ mode
;  - restore spsr_sys
;  - return to interrupted thread (pop C context and RA and restore 
;    cpsr simultaneously)
;
;  stack while in C code:
;
;       sp + 0x1c =  RA
;       sp + 0x18 =  saved r12
;       sp + 0x14 =  saved r3
;       sp + 0x10 =  saved r2
;       sp + 0x0c =  saved r1
;       sp + 0x08 =  saved r0
;       sp + 0x04 =  cpsr_sys
;       sp + 0x00 =  lr_sys
;

        .sect ".text:_ti_sysbios_family_arm_omap1030_Hwi_dispatchIRQ"
        .clink
        .armfunc _ti_sysbios_family_arm_omap1030_Hwi_dispatchIRQ
        .align  4
        
_ti_sysbios_family_arm_omap1030_Hwi_dispatchIRQ:
        .asmfunc
        mrs     r13, cpsr
	ands	r13, r13, #0x40	; check FIQ disable bit
        msreq   cpsr_c, #0x9f	; switch back to SYS mode
        msrne   cpsr_c, #0xdf	; preserving FIQ disable
	; in SYS mode
        sub     sp, sp, #4      ; make room for return addr
        stmfd   sp!, {r0-r3, r12}; save required C registers
	mov	r0, sp		; snapshot the system sp
        msreq   cpsr_c, #0x92	; switch back to IRQ mode
        msrne   cpsr_c, #0xd2	; preserving FIQ disable
	; in IRQ mode
	mov	sp, r0		; irq sp = sys sp
        sub     r0, lr, #4      ; fix the IRQ return address
        mrs     r2, spsr        ; get old CPSR
        msreq   cpsr_c, #0x9f	; switch back to SYS mode
        msrne   cpsr_c, #0xdf	; preserving FIQ disable
	; in SYS mode
        str     r0, [sp, #20]   ; save on stack for later pop into pc

	stmfd	sp!, {r2, r4, lr} ; save lr_sys, cpsr_sys

	; pass IRP to Hwi_dispatchIRQC
	mov	r4, sp		; save sp
	bic	sp, sp, #0x7	; align stack to 8 bytes
        bl      _ti_sysbios_family_arm_omap1030_Hwi_dispatchIRQC__I
	mov	sp, r4		; restore sp

        ldmfd   sp!, {r2, r4, lr} ; retrieve lr_sys, cpsr_sys

	mov	r1, sp		; snapshot the system sp for sp_irq
	add	sp, sp, #24	; unwind system sp

	; switch to IRQ mode to prepare for sync return
	ands	r3, r2, #0x40	; check FIQ disable bit
        msreq   cpsr_c, #0x92	; switch back to IRQ mode
        msrne   cpsr_c, #0xd2	; preserving FIQ disable

	mov	sp, r1		; sp_irq = system sp before pop

        msr     spsr_cf, r2	; load old cpsr_sys

	; restore C registers, pop return add into pc and restore cpsr_sys
        ldmfd   sp!, {r0-r3, r12, pc}^
        .endasmfunc

        .sect ".text:_ti_sysbios_family_arm_omap1030_Hwi_init"
        .clink
        .armfunc _ti_sysbios_family_arm_omap1030_Hwi_init

_ti_sysbios_family_arm_omap1030_Hwi_init:
        .asmfunc
        mrs     r12, cpsr
        bic     r12, r12, #0x1f ; switch to FIQ mode
        orr     r12, r12, #0x11 ; to initialize FIQ sp
        msr     cpsr_cf, r12    ;

        ldr     sp, fiqStackAddr
        ldr     sp, [sp]	; base of fiq stack
        ldr	r12, fiqStackSize
        ldr	r12, [r12]	; size of fiq stack
        add	sp, r12, sp	; sp = initial fiq stack

        mrs     r12, cpsr
        orr     r12, r12, #0x1f ; switch back to SYS mode
        msr     cpsr_cf, r12    ;

        bx      lr
        .endasmfunc

fiqStackAddr:
        .word   _ti_sysbios_family_arm_omap1030_Hwi_Module__state__V.fiqStack

fiqStackSize:
        .word   _ti_sysbios_family_arm_omap1030_Hwi_Module__state__V.fiqStackSize

        .end
