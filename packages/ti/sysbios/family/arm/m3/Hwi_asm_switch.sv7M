; --COPYRIGHT--,BSD
;  Copyright (c) $(CPYYEAR), Texas Instruments Incorporated
;  All rights reserved.
; 
;  Redistribution and use in source and binary forms, with or without
;  modification, are permitted provided that the following conditions
;  are met:
; 
;  *  Redistributions of source code must retain the above copyright
;     notice, this list of conditions and the following disclaimer.
; 
;  *  Redistributions in binary form must reproduce the above copyright
;     notice, this list of conditions and the following disclaimer in the
;     documentation and/or other materials provided with the distribution.
; 
;  *  Neither the name of Texas Instruments Incorporated nor the names of
;     its contributors may be used to endorse or promote products derived
;     from this software without specific prior written permission.
; 
;  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
;  AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
;  THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
;  PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR
;  CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
;  EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
;  PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
;  OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
;  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
;  OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
;  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
; --/COPYRIGHT--
;
; ======== Hwi_asm_switch.sem3 ========
;
;! Revision History
;! ================
;! 15-Feb-2010	agd	SDOCM00062772 Hwi code review stuff
;! 14-Dec-2009	agd	tag Module state struct
;! 13-Jan-2009	agd	correct the API descriptions
;! 23-Oct-2008	agd	optimize switch funcs based on training
;! 11-Apr-2008	agd	copied from arm9/primus/Hwi_asm_switch.s470
;

        .cdecls C,NOLIST,"package/internal/Hwi.xdc.h" 

        .thumb

    .if __TI_EABI_ASSEMBLER
        .asg ti_sysbios_family_arm_m3_Hwi_Module__state__V, _ti_sysbios_family_arm_m3_Hwi_Module__state__V
        .asg ti_sysbios_family_xxx_Hwi_switchToIsrStack, _ti_sysbios_family_xxx_Hwi_switchToIsrStack
        .asg ti_sysbios_family_xxx_Hwi_switchToTaskStack, _ti_sysbios_family_xxx_Hwi_switchToTaskStack
	.asg ti_sysbios_family_arm_m3_Hwi_init__I, _ti_sysbios_family_arm_m3_Hwi_init__I
	.asg ti_sysbios_family_arm_m3_Hwi_getTaskSP__E, _ti_sysbios_family_arm_m3_Hwi_getTaskSP__E
    .endif

        .global _ti_sysbios_family_xxx_Hwi_switchToIsrStack
        .global _ti_sysbios_family_xxx_Hwi_switchToTaskStack
	.global _ti_sysbios_family_arm_m3_Hwi_init__I
	.global _ti_sysbios_family_arm_m3_Hwi_getTaskSP__E

        .sect ".text:_ti_sysbios_family_xxx_Hwi_switchToIsrStack"
        .clink

_ti_sysbios_family_arm_m3_Hwi_Module__state__V .tag ti_sysbios_family_arm_m3_Hwi_Module_State

        .align  4

;
;  ======== ti_sysbios_family_xxx_Hwi_switchToIsrStack ========
;  Char *ti_sysbios_family_xxx_Hwi_switchToIsrStack();
;
;  If not already on the isr stack (MSP), switch to it.
;
;  Returns:
;        old control register value
;

        .thumbfunc _ti_sysbios_family_xxx_Hwi_switchToIsrStack

_ti_sysbios_family_xxx_Hwi_switchToIsrStack:
        .asmfunc
	mrs	r0, control	; on ISR stack already?
	cmp	r0, #0
	itt	NE
	movne	r1, #0		; no,
	msrne	control, r1	; force thread mode to use MSP
	bx	lr
        .endasmfunc

;
;  ======== ti_sysbios_family_xxx_Hwi_switchToTaskStack ========
;  ti_sysbios_family_xxx_Hwi_switchToTaskStack(Char *oldTaskSP);
;
;  If at bottom of ISR stack, switch to Task stack.
;
;  If passed control register token is not zero, then this is 
;  the thread that switched to the ISR stack first and therefore 
;  it is safe to switch back to the task stack (PSP)
;
;

        .thumbfunc _ti_sysbios_family_xxx_Hwi_switchToTaskStack

_ti_sysbios_family_xxx_Hwi_switchToTaskStack:
        .asmfunc
	cmp	r0, #0          ; lowest order ISR?
	itt	NE
	movne	r1, #2		; yes
	msrne	control, r1	; force thread mode to use PSP
        bx      lr
        .endasmfunc


        .thumbfunc _ti_sysbios_family_arm_m3_Hwi_getTaskSP__E

_ti_sysbios_family_arm_m3_Hwi_getTaskSP__E:
        .asmfunc
	mrs	r0, psp		; psp = interrupt task stack
        bx      lr
        .endasmfunc


	.thumbfunc _ti_sysbios_family_arm_m3_Hwi_init__I

;
;  ======== ti_sysbios_family_arm_m3_Hwi_init__I ========
;  set up dual stacks
;  only called if tasking is enabled
;  otherwise, msp = the only stack.
;  msp = handlers (isr Stack)
;  psp = threads (task Stacks)
;
_ti_sysbios_family_arm_m3_Hwi_init__I:
        .asmfunc
	mov	r0, sp
	msr	psp, r0		; psp = task stacks
	ldr	r0, isrStack
	ldr	r0, [r0]
	msr	msp, r0		; msp = isr stack
	mov	r0, #2
	msr	control, r0	; split stacks now (if not already).

    .if __TI_VFP_SUPPORT__ 
	ldr	r0, fpccr	; clear APSEN and LSPEN
	ldr	r1, [r0]	; get current fpccr
	bic	r1, r1, #0xc0000000 ; clear upper 2 bits
	str	r1, [r0]	; save/restore manually
    .endif
	bx	lr		; return on psp

isrStack:
        .word   _ti_sysbios_family_arm_m3_Hwi_Module__state__V.isrStack

    .if __TI_VFP_SUPPORT__ 
fpccr:
        .word   0xe000ef34
    .endif
        .endasmfunc
        .end
