%%{ 
/*
 * Copyright (c) 2012, Texas Instruments Incorporated
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * *  Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *
 * *  Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * *  Neither the name of Texas Instruments Incorporated nor the names of
 *    its contributors may be used to endorse or promote products derived
 *    from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
 * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
 * OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
 * OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
 * EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 * 
*/
%%}
%/*
% *  ======== Hwi.xdt ========
% *
% *! Revision History
% *! ================
% *! 26-Aug-2011 sg     diff placement when not __ti__
% *! 15-Mar-2010 agd    SDOCM00067878 integrate OMAP4430 ES1 unicache bug
% *!                    Workaround 1.1 into Hwi module
% *! 15-Feb-2010 agd    SDOCM00062772 Hwi code review stuff
% *! 23-Oct-2009 agd    SDOCM00063215 Can't statically create No-Latency Hwi
% *! 24-Sep-2007 agd    created
% */
%
%/*
% * Do not generate the vector table if this is a ROM assembly.
% */
%if (!Program.$$isrom) {
%var Hwi = xdc.module("ti.sysbios.family.arm.m3.Hwi");
%
%/*
% * M3 Exception Vector table
% */
extern Void `String(Hwi.resetFunc).substr(1)`();

%if (Program.build.target.$name.match(/gnu/)) {
const UInt32 ti_sysbios_family_arm_m3_Hwi_resetVectors[] __attribute__ ((section (".resetVecs"))) = {
%}
%else {
#pragma DATA_SECTION(ti_sysbios_family_arm_m3_Hwi_resetVectors, ".resetVecs");

/* const because it is meant to be placed in ROM */
const UInt32 ti_sysbios_family_arm_m3_Hwi_resetVectors[] = {
%}
    (UInt32)(&__TI_STACK_BASE),
    (UInt32)(`String(Hwi.resetFunc)`),
    (UInt32)(`String(Hwi.nmiFunc)`),            /* NMI */
    (UInt32)(`String(Hwi.hardFaultFunc)`),      /* Hard Fault */
    (UInt32)(`String(Hwi.memFaultFunc)`),       /* Mem Fault */
    (UInt32)(`String(Hwi.busFaultFunc)`),       /* Bus Fault */
    (UInt32)(`String(Hwi.usageFaultFunc)`),     /* Usage Fault */
    (UInt32)(`String(Hwi.reservedFunc)`),       /* reserved */
    (UInt32)(`String(Hwi.reservedFunc)`),       /* reserved */
    (UInt32)(`String(Hwi.reservedFunc)`),       /* reserved */
    (UInt32)(`String(Hwi.reservedFunc)`),       /* reserved */
    (UInt32)(`String(Hwi.svCallFunc)`),         /* SVCall */
    (UInt32)(`String(Hwi.debugMonFunc)`),       /* Debug Mon */
    (UInt32)(`String(Hwi.reservedFunc)`),       /* reserved */
    (UInt32)(&ti_sysbios_family_arm_m3_Hwi_pendSV__I),  /* pendSV */
%var len = Hwi.interrupt.length;
%var cname, iname;
%for (var i = 15; i < len; i++) {
%    if (Hwi.interrupt[i].useDispatcher) {
%        cname = "ti_sysbios_family_arm_m3_Hwi_dispatch__I";
%    }
%    else {
%       cname = String(Hwi.interrupt[i].fxn);
%       if (cname == "null")  {
%           cname = String(Hwi.nullIsrFunc);
%       }
%    }
    (UInt32)(`cname`),  /* intNum = `i` */
%}
};

%if (Hwi.vectorTableAddress != Hwi.resetVectorAddress) {
% if (Program.build.target.$name.match(/gnu/)) {
/* place holder for RAM vector table */
UInt32 ti_sysbios_family_arm_m3_Hwi_ramVectors[`Hwi.NUM_INTERRUPTS`] __attribute__((section(".vecs")));
% }
% else {
#pragma DATA_SECTION(ti_sysbios_family_arm_m3_Hwi_ramVectors, ".vecs");

/* place holder for RAM vector table */
UInt32 ti_sysbios_family_arm_m3_Hwi_ramVectors[`Hwi.NUM_INTERRUPTS`];
% }
%}

#define Hwi_nvic ti_sysbios_family_arm_m3_Hwi_nvic

%if (Hwi.enableWA1_1 == false) {
/*
 *  ======== Hwi_disableInterrupt ========
 */
UInt ti_sysbios_family_arm_m3_Hwi_disableInterrupt__E(UInt intNum)
{
    UInt oldEnableState, index, mask;

    if (intNum >= 16) {

	index = (intNum-16) >> 5;

	mask = 1 << ((intNum-16) & 0x1f);

	oldEnableState = Hwi_nvic.ISER[index] & mask;

	Hwi_nvic.ICER[index] = mask;
    }
    else if (intNum == 15) {
	oldEnableState = Hwi_nvic.STCSR & 0x00000002;
	Hwi_nvic.STCSR &= ~0x00000002;  /* disable SysTick Int */
    }

    return oldEnableState;
}

/*
 *  ======== Hwi_enableInterrupt ========
 */
UInt ti_sysbios_family_arm_m3_Hwi_enableInterrupt__E(UInt intNum)
{
    UInt oldEnableState, index, mask;

    if (intNum >= 16) {

	index = (intNum-16) >> 5;

	mask = 1 << ((intNum-16) & 0x1f);

	oldEnableState = Hwi_nvic.ISER[index] & mask;

	Hwi_nvic.ISER[index] = mask;
    }
    else if (intNum == 15) {
	oldEnableState = Hwi_nvic.STCSR & 0x00000002;
	Hwi_nvic.STCSR |= 0x00000002;   /* enable SysTick Int */
    }

    return oldEnableState;
}

/*
 *  ======== Hwi_restoreInterrupt ========
 */
Void ti_sysbios_family_arm_m3_Hwi_restoreInterrupt__E(UInt intNum, UInt key)
{
    UInt index, mask;

    if (intNum >= 16) {

	index = (intNum-16) >> 5;

	mask = 1 << ((intNum-16) & 0x1f);

	if (key) {
	    Hwi_nvic.ISER[index] = mask;
	}
	else {
	    Hwi_nvic.ICER[index] = mask;
	}
    }
    else if (intNum == 15) {
	if (key) {
	    Hwi_nvic.STCSR |= 0x00000002;       /* enable SysTick Int */
	}
	else {
	    Hwi_nvic.STCSR &= ~0x00000002;      /* disable SysTick Int */
	}
    }
}
%}
%else {
/*
 *  ======== Hwi_disableInterrupt ========
 */
UInt ti_sysbios_family_arm_m3_Hwi_disableInterrupt__E(UInt intNum)
{
    UInt oldEnableState, index, mask;

    if (intNum >= 16) {

	index = (intNum-16) >> 5;

	mask = 1 << ((intNum-16) & 0x1f);

	oldEnableState = ti_sysbios_family_arm_m3_Hwi_Module__state__V.iser[index] & mask;

	ti_sysbios_family_arm_m3_Hwi_Module__state__V.iser[index] &= ~mask;
    }
    else if (intNum == 15) {
	oldEnableState = ti_sysbios_family_arm_m3_Hwi_Module__state__V.enables & 0x8000;
	ti_sysbios_family_arm_m3_Hwi_Module__state__V.enables &= ~0x8000;
    }

    return oldEnableState;
}

/*
 *  ======== Hwi_enableInterrupt ========
 */
UInt ti_sysbios_family_arm_m3_Hwi_enableInterrupt__E(UInt intNum)
{
    UInt oldEnableState, index, mask;

    if (intNum >= 16) {

	index = (intNum-16) >> 5;

	mask = 1 << ((intNum-16) & 0x1f);

	oldEnableState = ti_sysbios_family_arm_m3_Hwi_Module__state__V.iser[index] & mask;

	ti_sysbios_family_arm_m3_Hwi_Module__state__V.iser[index] |= mask;
    }
    else if (intNum == 15) {
	oldEnableState = ti_sysbios_family_arm_m3_Hwi_Module__state__V.enables & 0x8000;
	ti_sysbios_family_arm_m3_Hwi_Module__state__V.enables |= 0x8000;
    }

    return oldEnableState;
}

/*
 *  ======== Hwi_restoreInterrupt ========
 */
Void ti_sysbios_family_arm_m3_Hwi_restoreInterrupt__E(UInt intNum, UInt key)
{
    UInt index, mask;

    if (intNum >= 16) {

	index = (intNum-16) >> 5;

	mask = 1 << ((intNum-16) & 0x1f);

	if (key) {
	    ti_sysbios_family_arm_m3_Hwi_Module__state__V.iser[index] |= mask;
	}
	else {
	    ti_sysbios_family_arm_m3_Hwi_Module__state__V.iser[index] &= ~mask;
	}
    }
    else if (intNum == 15) {
	if (key) {
	    ti_sysbios_family_arm_m3_Hwi_Module__state__V.enables |= 0x8000;    /* enable SysTick */
	}
	else {
	    ti_sysbios_family_arm_m3_Hwi_Module__state__V.enables &= ~0x8000;   /* disable SysTick */
	}
    }
}
%}
#undef Hwi_nvic
%} /* (!Program.$$isrom) */
%%{
/*
 * @(#) ti.sysbios.family.arm.m3; 2, 0, 0, 0,296; 5-18-2012 06:04:27; /db/vtree/library/trees/avala/avala-q37x/src/ xlibrary

 */

%%}
