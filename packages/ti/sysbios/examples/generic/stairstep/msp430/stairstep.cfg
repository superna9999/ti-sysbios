var Defaults = xdc.useModule('xdc.runtime.Defaults');
var Diags = xdc.useModule('xdc.runtime.Diags');
var Error = xdc.useModule('xdc.runtime.Error');
var Log = xdc.useModule('xdc.runtime.Log');
var LoggerBuf = xdc.useModule('xdc.runtime.LoggerBuf');
var Main = xdc.useModule('xdc.runtime.Main');
var Memory = xdc.useModule('xdc.runtime.Memory')
var SysMin = xdc.useModule('xdc.runtime.SysMin');
var System = xdc.useModule('xdc.runtime.System');
var Text = xdc.useModule('xdc.runtime.Text');

var BIOS = xdc.useModule('ti.sysbios.BIOS');
var Clock = xdc.useModule('ti.sysbios.knl.Clock');
var Swi = xdc.useModule('ti.sysbios.knl.Swi');
var Task = xdc.useModule('ti.sysbios.knl.Task');
var Load = xdc.useModule('ti.sysbios.utils.Load');
var Semaphore = xdc.useModule('ti.sysbios.knl.Semaphore');

var Hwi = xdc.useModule('ti.sysbios.family.msp430.Hwi');
var Timer = xdc.useModule('ti.sysbios.family.msp430.Timer');

/* 
 * Program.argSize sets the size of the .args section. 
 * The examples don't use command line args so argSize is set to 0.
 */
Program.argSize = 0x0;

/*
 * Uncomment this line to globally disable Asserts.
 * All modules inherit the default from the 'Defaults' module.  You
 * can override these defaults on a per-module basis using Module.common$. 
 * Disabling Asserts will save code space and improve runtime performance.
Defaults.common$.diags_ASSERT = Diags.ALWAYS_OFF;
 */

/*
 * Uncomment this line to keep module names from being loaded on the target.
 * The module name strings are placed in the .const section. Setting this
 * parameter to false will save space in the .const section.  Error and
 * Assert messages will contain an "unknown module" prefix instead
 * of the actual module name.
Defaults.common$.namedModule = false;
 */

/*
 * Minimize exit handler array in System.  The System module includes
 * an array of functions that are registered with System_atexit() to be
 * called by System_exit().
 */
System.maxAtexitHandlers = 4;       

/* 
 * Uncomment this line to disable the Error print function.  
 * We lose error information when this is disabled since the errors are
 * not printed.  Disabling the raiseHook will save some code space if
 * your app is not using System_printf() since the Error_print() function
 * calls System_printf().
Error.raiseHook = null;
 */

/* 
 * Uncomment this line to keep Error, Assert, and Log strings from being
 * loaded on the target.  These strings are placed in the .const section.
 * Setting this parameter to false will save space in the .const section.
 * Error, Assert and Log message will print raw ids and args instead of
 * a formatted message.
Text.isLoaded = false;
 */

/*
 * Uncomment this line to disable the output of characters by SysMin
 * when the program exits.  SysMin writes characters to a circular buffer.
 * This buffer can be viewed using the SysMin Output view in ROV.
SysMin.flushAtExit = false;
 */

/*
 * The BIOS module will create the default heap for the system.
 * Specify the size of this default heap.
 */
BIOS.heapSize = 128;

/* System stack size (used by ISRs and Swis) */
Program.stack = 0x200;

/* Circular buffer size for System_printf() */
SysMin.bufSize = 0x100;

/* Configure SysMin to send System_printfs to standard out */
System.SupportProxy = SysMin;

/*
 * Enable Hwi and Swi load tracking.  This adds overhead to every Hwi or Swi
 * invocation.
 */
Load.hwiEnabled = true;
Load.swiEnabled = true;

Clock.tickPeriod = 10000;

/*
 * Configure a Timer to interrupt every 100ms.
 * timerFunc() provides Hwi load and posts a Swi and Semaphore to provide
 * Swi and Task loads, and adjusts the loads every 5 seconds.
 * Enable nesting of other interrupts (e.g., those for Clock and Timestamp) on 
 * top of this Timer's ISR.
 */
var timerParams = new Timer.Params();
timerParams.startMode = Timer.StartMode_AUTO;
timerParams.period = 100000;   /* 100,000 uSecs = 100ms */
timerParams.nesting = true;    /* enable other interrupts to nest on top */
var timer0 = Timer.create(Timer.ANY, '&timerFunc', timerParams); 

/* 
 * Create Semaphore for Task thread to pend on 
 */
Program.global.sem = Semaphore.create(0);

/* 
 * Create Swi load thread 
 */
Program.global.swi = Swi.create('&swiLoad');

/* 
 * Create Task load thread 
 */
var taskLoadTask = Task.create('&taskLoad');

/* 
 * Enable RTA 
 */

/* 
 * Bring in and configure the RTA Agent 
 */
var Agent = xdc.useModule('ti.sysbios.rta.Agent');

/*
 * Enable logging of SYS/BIOS Hwi and Swi events, and provide the ability
 * to turn them on or off at runtime (runtime control).
 */
Agent.sysbiosSwiLogging = true;
Agent.sysbiosSwiLoggingRuntimeControl = true;
Agent.sysbiosHwiLogging = true;
Agent.sysbiosHwiLoggingRuntimeControl = true;

/*
 * Enable logging from interrupt stubs of all Hwi instances.
 */
Hwi.alwaysLog = true;

/* 
 * Set the size of the logger buffer used for Log calls in the application's 
 * C code in bytes.
 */
Agent.mainLoggerSize = 1024;

/*
 * Set the size of the logger buffer used for Log calls from SYS/BIOS modules
 * in bytes.
 */
Agent.sysbiosLoggerSize = 2048;

/* Set the size of the logger buffer used for logging Load events in bytes. */
Agent.loadLoggerSize = 512;

/* Set static policy (disable runtime creates) to save footprint. */
Defaults.common$.memoryPolicy = xdc.module("xdc.runtime.Types").STATIC_POLICY;

/*
 * Build a custom BIOS library.  
 *
 * Enabling Swi and Hwi Load statistics requires a custom library. The
 * "instrumented" and "non-instrumented" libraries do not support Hwi or Swi
 * hooks, and the Load module uses hooks to gather the Hwi and Swi Load
 * statistics.
 *
 * The custom library will also be smaller than the pre-built "instrumented"
 * (default) and "non-instrumented" libraries.
 */
BIOS.libType = BIOS.LibType_Custom;
