# Translatable bundle properties
example_0_title = Minimal
example_0_description = This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call.

example_1_title = Typical
example_1_description = This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API.

example_2_title = Typical (with separate config project)
example_2_description = Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator.

example_3_title = C++ Example (bigtime)
example_3_description = In this program, C++ is used to create a real-time clock/calendar.

example_4_title = Clock Example
example_4_description = The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks.

example_5_title = Error Example
example_5_description = This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook.

example_6_title = Event Example
example_6_description = The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events.

example_7_title = Hello Example
example_7_description = The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout.

example_8_title = Log Example
example_8_description = This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file.

example_9_title = Memory Example
example_9_description = This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem.

example_10_title = Task Mutex Example
example_10_description = This example shows the use of two tasks and one semaphore to protect data access.

example_11_title = Task Mutex Example (separate config project)
example_11_description = This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator.

example_12_title = Small Example
example_12_description = This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint.

example_13_title = Stairstep Example
example_13_description = The RTA stairstep example runs continuously and periodically generates log events. Different threads (Hwi, Swi, Task) run to add CPU load to the system.

example_14_title = Static Example
example_14_description = The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters.

example_15_title = Swi Example
example_15_description = The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work.

example_16_title = Minimal
example_16_description = This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call.

example_17_title = Typical
example_17_description = This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API.

example_18_title = Typical (with separate config project)
example_18_description = Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator.

example_19_title = C++ Example (bigtime)
example_19_description = In this program, C++ is used to create a real-time clock/calendar.

example_20_title = Clock Example
example_20_description = The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks.

example_21_title = Error Example
example_21_description = This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook.

example_22_title = Event Example
example_22_description = The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events.

example_23_title = Hello Example
example_23_description = The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout.

example_24_title = Log Example
example_24_description = This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file.

example_25_title = Memory Example
example_25_description = This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem.

example_26_title = Task Mutex Example
example_26_description = This example shows the use of two tasks and one semaphore to protect data access.

example_27_title = Task Mutex Example (separate config project)
example_27_description = This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator.

example_28_title = Small Example
example_28_description = This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint.

example_29_title = Stairstep Example
example_29_description = The RTA stairstep example runs continuously and periodically generates log events. Different threads (Hwi, Swi, Task) run to add CPU load to the system.

example_30_title = Static Example
example_30_description = The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters.

example_31_title = Swi Example
example_31_description = The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work.

example_32_title = Idle Example
example_32_description = A 28x specific example which uses an Idle function to print to standard out and a log buffer

example_33_title = Swi Example
example_33_description = A 28x specific example which uses an Swi function and an Idle function to print to a log buffer

example_34_title = Task Example
example_34_description = A 28x specific example which uses an task to print to a log buffer

example_35_title = PIE Interrupt Example
example_35_description = A 28x specific example which shows how to handle (simulated) peripheral interrupts from the PIE

example_36_title = Minimal
example_36_description = This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call.

example_37_title = Typical
example_37_description = This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API.

example_38_title = Typical (with separate config project)
example_38_description = Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator.

example_39_title = C++ Example (bigtime)
example_39_description = In this program, C++ is used to create a real-time clock/calendar.

example_40_title = Clock Example
example_40_description = The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks.

example_41_title = Error Example
example_41_description = This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook.

example_42_title = Event Example
example_42_description = The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events.

example_43_title = Hello Example
example_43_description = The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout.

example_44_title = Log Example
example_44_description = This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file.

example_45_title = Memory Example
example_45_description = This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem.

example_46_title = Task Mutex Example
example_46_description = This example shows the use of two tasks and one semaphore to protect data access.

example_47_title = Task Mutex Example (separate config project)
example_47_description = This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator.

example_48_title = Small Example
example_48_description = This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint.

example_49_title = Stairstep Example
example_49_description = The RTA stairstep example runs continuously and periodically generates log events. Different threads (Hwi, Swi, Task) run to add CPU load to the system.

example_50_title = Static Example
example_50_description = The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters.

example_51_title = Swi Example
example_51_description = The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work.

example_52_title = Idle Example
example_52_description = An MSP430 specific example which uses an Idle function to print to standard out and a log buffer

example_53_title = Swi Example
example_53_description = An MSP430 specific example which uses an Swi function and an Idle function to print to a log buffer

example_54_title = Task Example
example_54_description = An MSP430 specific example which uses an task to print to a log buffer

example_55_title = Minimal
example_55_description = This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call.

example_56_title = Typical
example_56_description = This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API.

example_57_title = Typical (with separate config project)
example_57_description = Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator.

example_58_title = C++ Example (bigtime)
example_58_description = In this program, C++ is used to create a real-time clock/calendar.

example_59_title = Clock Example
example_59_description = The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks.

example_60_title = Error Example
example_60_description = This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook.

example_61_title = Event Example
example_61_description = The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events.

example_62_title = Hello Example
example_62_description = The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout.

example_63_title = Log Example
example_63_description = This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file.

example_64_title = Memory Example
example_64_description = This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem.

example_65_title = Task Mutex Example
example_65_description = This example shows the use of two tasks and one semaphore to protect data access.

example_66_title = Task Mutex Example (separate config project)
example_66_description = This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator.

example_67_title = Small Example
example_67_description = This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint.

example_68_title = Stairstep Example
example_68_description = The RTA stairstep example runs continuously and periodically generates log events. Different threads (Hwi, Swi, Task) run to add CPU load to the system.

example_69_title = Static Example
example_69_description = The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters.

example_70_title = Swi Example
example_70_description = The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work.

example_71_title = Minimal
example_71_description = This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call.

example_72_title = Typical
example_72_description = This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API.

example_73_title = Typical (with separate config project)
example_73_description = Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator.

example_74_title = C++ Example (bigtime)
example_74_description = In this program, C++ is used to create a real-time clock/calendar.

example_75_title = Clock Example
example_75_description = The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks.

example_76_title = Error Example
example_76_description = This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook.

example_77_title = Event Example
example_77_description = The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events.

example_78_title = Hello Example
example_78_description = The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout.

example_79_title = Log Example
example_79_description = This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file.

example_80_title = Memory Example
example_80_description = This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem.

example_81_title = Task Mutex Example
example_81_description = This example shows the use of two tasks and one semaphore to protect data access.

example_82_title = Task Mutex Example (separate config project)
example_82_description = This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator.

example_83_title = Small Example
example_83_description = This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint.

example_84_title = Stairstep Example
example_84_description = The RTA stairstep example runs continuously and periodically generates log events. Different threads (Hwi, Swi, Task) run to add CPU load to the system.

example_85_title = Static Example
example_85_description = The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters.

example_86_title = Swi Example
example_86_description = The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work.

example_87_title = Idle Example
example_87_description = A 28x specific example which uses an Idle function to print to standard out and a log buffer

example_88_title = Swi Example
example_88_description = A 28x specific example which uses an Swi function and an Idle function to print to a log buffer

example_89_title = Task Example
example_89_description = A 28x specific example which uses an task to print to a log buffer

example_90_title = PIE Interrupt Example
example_90_description = A 28x specific example which shows how to handle (simulated) peripheral interrupts from the PIE

example_91_title = Minimal
example_91_description = This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call.

example_92_title = Typical
example_92_description = This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API.

example_93_title = Typical (with separate config project)
example_93_description = Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator.

example_94_title = C++ Example (bigtime)
example_94_description = In this program, C++ is used to create a real-time clock/calendar.

example_95_title = Clock Example
example_95_description = The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks.

example_96_title = Error Example
example_96_description = This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook.

example_97_title = Event Example
example_97_description = The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events.

example_98_title = Hello Example
example_98_description = The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout.

example_99_title = Log Example
example_99_description = This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file.

example_100_title = Memory Example
example_100_description = This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem.

example_101_title = Task Mutex Example
example_101_description = This example shows the use of two tasks and one semaphore to protect data access.

example_102_title = Task Mutex Example (separate config project)
example_102_description = This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator.

example_103_title = Small Example
example_103_description = This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint.

example_104_title = Stairstep Example
example_104_description = The RTA stairstep example runs continuously and periodically generates log events. Different threads (Hwi, Swi, Task) run to add CPU load to the system.

example_105_title = Static Example
example_105_description = The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters.

example_106_title = Swi Example
example_106_description = The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work.

example_107_title = Clock Swi Example
example_107_description = An MSP430 specific example which increments counters in Swi and Clock functions

