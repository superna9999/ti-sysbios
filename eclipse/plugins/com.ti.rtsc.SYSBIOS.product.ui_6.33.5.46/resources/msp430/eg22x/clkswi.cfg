var Defaults = xdc.useModule("xdc.runtime.Defaults");
var Diags = xdc.useModule("xdc.runtime.Diags");
var Error = xdc.useModule("xdc.runtime.Error");
var Log = xdc.useModule("xdc.runtime.Log");
var LoggerBuf = xdc.useModule("xdc.runtime.LoggerBuf");
var Main = xdc.useModule("xdc.runtime.Main");
var Memory = xdc.useModule("xdc.runtime.Memory")
var SysMin = xdc.useModule("xdc.runtime.SysMin");
var System = xdc.useModule("xdc.runtime.System");
var Text = xdc.useModule("xdc.runtime.Text");
var Startup = xdc.useModule("xdc.runtime.Startup");

var BIOS = xdc.useModule("ti.sysbios.BIOS");
var Swi = xdc.useModule("ti.sysbios.knl.Swi");
var Clock = xdc.useModule("ti.sysbios.knl.Clock");
var Idle = xdc.useModule("ti.sysbios.knl.Idle");
var Hwi = xdc.useModule("ti.sysbios.family.msp430.Hwi");

/* we disable this feature to allow the application to freely define ISRs */
Hwi.fillVectors = false;

/* 
 * Program.argSize sets the size of the .args section. 
 * The examples don't use command line args so argSize is set to 0.
 */
Program.argSize = 0x0;

/*
 * Uncomment this line to globally disable Asserts.
 * All modules inherit the default from the 'Defaults' module.  You
 * can override these defaults on a per-module basis using Module.common$. 
 * Disabling Asserts will save code space and improve runtime performance.
Defaults.common$.diags_ASSERT = Diags.ALWAYS_OFF;
 */

/*
 * Uncomment this line to keep module names from being loaded on the target.
 * The module name strings are placed in the .const section. Setting this
 * parameter to false will save space in the .const section.  Error and
 * Assert messages will contain an "unknown module" prefix instead
 * of the actual module name.
Defaults.common$.namedModule = false;
 */

/*
 * Minimize exit handler array in System.  The System module includes
 * an array of functions that are registered with System_atexit() to be
 * called by System_exit().
 */
System.maxAtexitHandlers = 4;       

/* 
 * Uncomment this line to disable the Error print function.  
 * We lose error information when this is disabled since the errors are
 * not printed.  Disabling the raiseHook will save some code space if
 * your app is not using System_printf() since the Error_print() function
 * calls System_printf().
Error.raiseHook = null;
 */

/* 
 * Uncomment this line to keep Error, Assert, and Log strings from being
 * loaded on the target.  These strings are placed in the .const section.
 * Setting this parameter to false will save space in the .const section.
 * Error, Assert and Log message will print raw ids and args instead of
 * a formatted message.
Text.isLoaded = false;
 */

/*
 * Uncomment this line to disable the output of characters by SysMin
 * when the program exits.  SysMin writes characters to a circular buffer.
 * This buffer can be viewed using the SysMin Output view in ROV.
SysMin.flushAtExit = false;
 */
/* 
 * Program.stack is set a reasonable default. 
 * This stack size can be further tuned using ROV. 
 * Take a look at ROV for ti.sysbios.knl.Task module. 
 * The Module view shows the system stack peak usage. 
 */
Program.stack = 128;

/* All objects are created in cfg script. No dynamic creates */
Defaults.common$.memoryPolicy = xdc.module("xdc.runtime.Types").STATIC_POLICY;

/* Use SysMin for standard out (ie System_printf()) */
System.SupportProxy = SysMin;

/* Make the buffer big enough to hold a reasonably sized Error message */
SysMin.bufSize = 80;

/* handle characters in app function myOutputFxn() */
SysMin.outputFxn = "&myPutCharFxn"; 

/* Add 'myInit' to startup functions */
var len = Startup.firstFxns.length
Startup.firstFxns.length++;
Startup.firstFxns[len] = "&myInit";

/* ==== SYSBIOS specific configuration ==== */

/*
 * Disable unused BIOS features to minimize footprint.
 * This example does not use Swis, Tasks, or Clocks.
 */
BIOS.swiEnabled = true;
BIOS.clockEnabled = true;
BIOS.taskEnabled = false;

/* Set BIOS.heapSize to zero to eliminate system heap */
BIOS.heapSize = 0;

/* 
 * In this example, runtime support functions that need 
 * a lock are NOT called from multiple threads that can 
 * pre-empt each other.
 *
 * Use the simplest lock function available.
 */
BIOS.rtsGateType = BIOS.NoLocking;

/* Customize Swi priorities */
Swi.numPriorities = 4;

/* Add a background idle function */
Idle.addFunc("&idl0Fxn");

/* Create 2 swis used by example */
Program.global.swiA = Swi.create("&swiFxnA");
Program.global.swiB = Swi.create("&swiFxnB");

/* Create 2 clock instances used by the example */
var clkParams = new Clock.Params();
clkParams.startFlag = true;
clkParams.period = 10;
Program.global.clk0 = Clock.create("&clk0Fxn", 1, clkParams);

clkParams.period = 20;
Program.global.clk1 = Clock.create("&clk1Fxn", 2, clkParams);

/*
 * Build a custom BIOS library.  The custom library will be smaller than the
 * pre-built "instrumented" (default) and "non-instrumented" libraries.
 *
 * The BIOS.logsEnabled parameter specifies whether the Logging is enabled
 * within BIOS for this custom build.  These logs are used by the RTA and
 * UIA analysis tools.
 *
 * The BIOS.assertsEnabled parameter specifies whether BIOS code will
 * include Assert() checks.  Setting this parameter to 'false' will generate
 * smaller and faster code, but having asserts enabled is recommended for
 * early development as the Assert() checks will catch lots of programming
 * errors (invalid parameters, etc.)
 */
BIOS.libType = BIOS.LibType_Custom;
BIOS.logsEnabled = false;
BIOS.assertsEnabled = true;
